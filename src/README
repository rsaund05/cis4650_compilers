A JFlex+Cup implementation for the C-minus language.
Based off the work of Fei Song, his 'java_tiny' project.

  Note that you may need to modify the classpath in the Makefile so that it
will point to the directory where "java_cup" is located.  The assumed java_cup
classpath is /usr/share/java/cup.jar.

  To build the parser, type "make" in the current directory, which will 
generate an executable program called "CM".

  To print the abstract syntax tree for a file like "fac.cm", type 

    "java -classpath ../java_cup/java-cup-11b-runtime.jar:. CM fac.cm -a" 

and the syntax tree will be displayed on the screen.

  To print the symbol table to a file like "fac.cm", type
	
    "java -classpath ../java_cup/java-cup-11b-runtime.jar:. CM fac.cm -s"
	
  Where the output of the file will be in a file called "output.txt"

  To rebuild the parser, type "make clean" and type "make" again.

  Also note that all the abstract syntax tree structures are defined under
the directory "absyn" and within "Absyn.java" class, the showTree function
is implemented.  In addition, since some java files are generated automatically,
they may contain variables that are not used, which are safe to ignore in
the compilation process.

-known limitations: -cannot have back to back errors in .cm file.
		    -If an invalid variable declaration is given, line number is reported as one greater than
 		     it should be reported as
		    -Cannot reference an array without an index provided, otherwise will report an incorrect 		     
		     syntax error
		    -Input and output functions can be redefined within the *.cm file, which is not intended
		    -If there is a call to the input() function, it must be consecutively followed by a call 		     
                     to output(), otherwise the parser crash

-Assumptions:	-Input and output functions are predetermined functions, and will not be printed.